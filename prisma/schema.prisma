// Configuration de la base de donnÃ©es
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "postgresql"  // ChangÃ© de "mysql" Ã  "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//////////////////////////
// ENUMS
//////////////////////////
enum UserRole {
  MERCHANT
  CLIENT
  SUPPLIER
  ADMIN  // Ajout pour administration
}
enum OnboardingStep {
  email_verification  // Ã‰tape 1: VÃ©rification email
  personal_info      // Ã‰tape 2: Nom, prÃ©nom
  contact_info       // Ã‰tape 3: TÃ©lÃ©phone
  address_info       // Ã‰tape 4: Adresse
  profile_photo      // Ã‰tape 5: Photo (optionnelle)
  completed          // Onboarding terminÃ©
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
enum ProductStatus {
  DRAFT     // Brouillon
  PUBLISHED // PubliÃ©
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  MOBILE_MONEY
}

enum NotificationType {
  ORDER
  MESSAGE
  FOLLOW
  PRODUCT
  SHOP         
  SERVICE      
  PROMOTION    
  SYSTEM       
  VERIFICATION 
   PRODUCT_LIKE 
}
enum LikeType {
  LIKE
  DISLIKE
}
enum ContactStatus {
  UNREAD
  RESPONDED
  CLOSED
}

//////////////////////////
// MODELS
//////////////////////////
model MerchantContact {
  id          Int      @id @default(autoincrement())
  shopId      Int
  merchantId  Int
  subject     String
  senderEmail String
  message     String   @db.Text
  status      String   @default("UNREAD")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   
  // Relations avec des noms de contraintes uniques
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, map: "MerchantContact_shop_fkey")
  merchant    User     @relation("ReceivedMerchantContacts", fields: [merchantId], references: [id], onDelete: Cascade, map: "MerchantContact_merchant_receiver_fkey")
  sender      User     @relation("SentMerchantContacts", fields: [merchantId], references: [id], map: "MerchantContact_merchant_sender_fkey")
  
  responses   MerchantContactResponse[]
}

model MerchantContactResponse {
  id                 Int              @id @default(autoincrement())
  merchantContactId  Int
  merchantContact    MerchantContact  @relation(fields: [merchantContactId], references: [id], map: "MerchantContactResponse_merchantContact_fkey")
  merchantId         Int
  merchant           User             @relation(fields: [merchantId], references: [id], map: "MerchantContactResponse_merchant_fkey")
  response           String
  createdAt         DateTime         @default(now())
}


// Assurez-vous d'ajouter les relations dans les modÃ¨les Shop et User
// Utilisateur
model User {
  id               Int           @id @default(autoincrement())
  
  // === Ã‰TAPE 1: INSCRIPTION MINIMALE (OBLIGATOIRE) ===
  email            String         @unique
  password         String
  role             UserRole       @default(CLIENT)
  
  // === VÃ‰RIFICATION & SÃ‰CURITÃ‰ ===
  isVerified       Boolean        @default(false)
  verificationCode String?
  tokenExpiry      DateTime?
  resetCode        String?
  googleId         String?        @unique
  
  // === ONBOARDING PROGRESSIF ===
  onboardingStep     OnboardingStep @default(email_verification)
  profileCompletion  Int            @default(20) // % de completion
  isProfileCompleted Boolean        @default(false)
  
  // === Ã‰TAPE 2: INFORMATIONS PERSONNELLES (OPTIONNELLES) ===
  firstName        String?        // ðŸŽ¯ Maintenant optionnel
  lastName         String?        // ðŸŽ¯ Maintenant optionnel
  gender           Gender?        // Nouveau champ
  dateOfBirth      DateTime?      // Nouveau champ
  
  // === Ã‰TAPE 3: CONTACT (OPTIONNELLES) ===
  phoneNumber      String?        @unique // ðŸŽ¯ Maintenant optionnel
  whatsappNumber   String?        // Nouveau champ
  
  // === Ã‰TAPE 4: ADRESSE (OPTIONNELLES) ===
  country          String?        // ðŸŽ¯ Maintenant optionnel
  city             String?        // ðŸŽ¯ Maintenant optionnel
  department       String?        // ðŸŽ¯ Maintenant optionnel
  commune          String?        // ðŸŽ¯ Maintenant optionnel
  address          String?        // Adresse complÃ¨te
  
  // === Ã‰TAPE 5: PROFIL (OPTIONNELLES) ===
  photo            String?
  bio              String?        // Nouveau champ
  
  // === PRÃ‰FÃ‰RENCES ===
  language         String         @default("fr")
  currency         String         @default("CFA")
  timezone         String         @default("Africa/Dakar")
  
  // === NOTIFICATIONS ===
  emailNotifications    Boolean   @default(true)
  smsNotifications     Boolean   @default(false)
  pushNotifications    Boolean   @default(true)
  marketingEmails      Boolean   @default(false)
  
  // === STATUT & ACTIVITÃ‰ ===
  isOnline         Boolean        @default(false)
  lastLogin        DateTime?      // Nouveau champ
  lastActive       DateTime?      // Nouveau champ
  
  // === TIMESTAMPS ===
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // === RELATIONS (INCHANGÃ‰ES) ===
  cart             Cart?
  shop             Shop?
  products         Product[]      @relation("UserProducts")
  orders           Order[]
  messagesSent     Message[]      @relation("SenderMessages")
  messagesReceived Message[]      @relation("ReceiverMessages")
  subscriptions    Subscription[] @relation("Follower")
  followers        Subscription[] @relation("Following")
  services         Service[]
  notifications    Notification[]
  statuses         Status[]
  productComments  ProductComment[]
  commentReplies   CommentReply[]
  productLikes     ProductLike[]
  productShares    ProductShare[]
  receivedMerchantContacts   MerchantContact[] @relation("ReceivedMerchantContacts")
  sentMerchantContacts       MerchantContact[] @relation("SentMerchantContacts")
  merchantContactResponses   MerchantContactResponse[]
  clientFeedbacks    MerchantFeedback[] @relation("ClientFeedbacks")
  merchantFeedbacks  MerchantFeedback[] @relation("MerchantFeedbacks")
}

// Boutique
model Shop {
  id               Int           @id @default(autoincrement())
  name             String
  description      String?
  logo             String?
  phoneNumber      String         @unique
  address          String?
  userId           Int            @unique
  verifiedBadge    Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  owner            User           @relation(fields: [userId], references: [id])
  products         Product[]
  contactMessages MerchantContact[]
  feedbacks          MerchantFeedback[]
}

// Produit
model Product {
  id               Int           @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  stock            Int
  videoUrl         String? 
  category         String
  shopId           Int
  userId           Int
  status           ProductStatus @default(DRAFT)  // Ajout du statut (brouillon/publiÃ©)
  likesCount       Int           @default(0)      // Compteur de likes
  commentsCount    Int           @default(0)      // Compteur de commentaires
  sharesCount      Int           @default(0)      // Compteur de partages
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  shop             Shop           @relation(fields: [shopId], references: [id])
  owner            User           @relation("UserProducts", fields: [userId], references: [id])
  orderItems       OrderItem[]
  images           ProductImage[] 
  comments         ProductComment[] // Nouvelle relation
  likes            ProductLike[]    // Nouvelle relation
  shares           ProductShare[] 
  cartItems        CartItem[]  
}
model ProductComment {
  id               Int           @id @default(autoincrement())
  productId        Int
  userId           Int
  comment          String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  product          Product       @relation(fields: [productId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  replies          CommentReply[] // Support pour les rÃ©ponses aux commentaires
}

// RÃ©ponses aux commentaires (nouveau)
model CommentReply {
  id               Int           @id @default(autoincrement())
  commentId        Int
  userId           Int
  reply            String
  createdAt        DateTime      @default(now())

  // Relations
  comment          ProductComment @relation(fields: [commentId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
}

// Likes de produit (nouveau)
model ProductLike {
   id               Int           @id @default(autoincrement())
  productId        Int
  userId           Int
  type             LikeType      @default(LIKE)
  createdAt        DateTime      @default(now())

  // Relations
  product          Product       @relation(fields: [productId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  
  // Contrainte d'unicitÃ© pour Ã©viter les likes multiples
  @@unique([productId, userId])
}

// Partages de produit (nouveau)
model ProductShare {
  id               Int           @id @default(autoincrement())
  productId        Int
  userId           Int
  sharedTo         String?       // Peut contenir une plateforme (ex: WhatsApp, Facebook)
  createdAt        DateTime      @default(now())

  // Relations
  product          Product       @relation(fields: [productId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
}



// Images de produit
model ProductImage {
  id               Int           @id @default(autoincrement())
  productId        Int
   imageUrl  String   @db.VarChar(500)

  // Relations
  product          Product        @relation(fields: [productId], references: [id])
}

// Commande
model Order {
  id               Int           @id @default(autoincrement())
  clientId         Int
  totalAmount      Float
  status           OrderStatus
  paymentMethod    PaymentMethod
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  client           User           @relation(fields: [clientId], references: [id])
  feedbacks          MerchantFeedback[]
  orderItems       OrderItem[]
}
// Ã€ ajouter Ã  votre fichier schema.prisma

model MerchantFeedback {
  id                Int       @id @default(autoincrement())
  orderId           Int
  clientId          Int
  merchantId        Int
  shopId            Int
  rating            Int       // Note de 1 Ã  5
  comment           String?   @db.Text
  contactSuccessful Boolean   // Le client a-t-il pu contacter le commerÃ§ant?
  createdAt         DateTime  @default(now())
  
  // Relations
  order             Order     @relation(fields: [orderId], references: [id])
  client            User      @relation("ClientFeedbacks", fields: [clientId], references: [id])
  merchant          User      @relation("MerchantFeedbacks", fields: [merchantId], references: [id])
  shop              Shop      @relation(fields: [shopId], references: [id])
}

// DÃ©tail de commande
model OrderItem {
  id               Int           @id @default(autoincrement())
  orderId          Int
  productId        Int
  quantity         Int
  price            Float

  // Relations
  order            Order          @relation(fields: [orderId], references: [id])
  product          Product        @relation(fields: [productId], references: [id])
}

// Message// Ajoutez ces deux champs Ã  votre modÃ¨le Message dans schema.prisma

// Message - MISE Ã€ JOUR POUR L'AUDIO
model Message {
  id               Int           @id @default(autoincrement())
  senderId         Int
  receiverId       Int
  content          String        @db.Text
  mediaUrl         String?       // URL du mÃ©dia (image, vidÃ©o OU audio) ðŸ”¥
  mediaType        String?       // Type: 'image', 'video' OU 'audio' ðŸ”¥
  isRead           Boolean       @default(false)
  deletedForSender Boolean       @default(false)
  deletedForReceiver Boolean     @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  sender           User          @relation("SenderMessages", fields: [senderId], references: [id])
  receiver         User          @relation("ReceiverMessages", fields: [receiverId], references: [id])
}
// Abonnement (follow)
model Subscription {
  id               Int           @id @default(autoincrement())
  followerId       Int
  followingId      Int
  createdAt        DateTime       @default(now())

  // Relations
  follower         User           @relation("Follower", fields: [followerId], references: [id])
  following        User           @relation("Following", fields: [followingId], references: [id])
}

// Service
model Service {
  id               Int           @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  providerId       Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  provider         User           @relation(fields: [providerId], references: [id])
}

// âœ… Notification
model Notification {
  id               Int               @id @default(autoincrement())
  userId           Int
  type             NotificationType
  message          String
  isRead           Boolean           @default(false)
  actionUrl        String?           
  resourceId       Int?              
  resourceType     String?           
  priority         Int               @default(0)  
  expiresAt        DateTime?         
  createdAt        DateTime          @default(now())

  // Relations
  user             User              @relation(fields: [userId], references: [id])
}
model Cart {
  id               Int           @id @default(autoincrement())
  userId           Int           @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user             User          @relation(fields: [userId], references: [id])
  items            CartItem[]
}

// Ã‰lÃ©ment du panier
model CartItem {
  id               Int           @id @default(autoincrement())
  cartId           Int
  productId        Int
  quantity         Int           @default(1)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  cart             Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product          Product       @relation(fields: [productId], references: [id])

  // Contrainte d'unicitÃ© pour Ã©viter les doublons
  @@unique([cartId, productId])
}

// âœ… Statut
model Status {
  id               Int            @id @default(autoincrement())
  userId           Int
  content          String
  imageUrl         String?
  videoUrl         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  user             User            @relation(fields: [userId], references: [id])
}
